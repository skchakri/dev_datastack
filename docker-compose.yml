version: "3.9"

name: dev-datastack

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
    ports:
      - "3306:3306"
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./input/mysql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [devnet]

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./input/postgres:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -h 127.0.0.1"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [devnet]

  mongo:
    image: mongo:7
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongo:/data/db
      - ./input/mongo:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --host 127.0.0.1 --eval 'db.runCommand({ ping: 1 })' --quiet || exit 1"]
    networks: [devnet]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    ports:
      - "9200:9200"
      - "9300:9300"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - ./data/elasticsearch:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -q '"status"'"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [devnet]

  redis:
    image: redis:7
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks: [devnet]

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.3
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    networks: [devnet]

  pgadmin:
    image: dpage/pgadmin4:8.10
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks: [devnet]

  adminer:
    image: adminer:4
    container_name: adminer
    ports:
      - "8080:8080"
    depends_on:
      - mysql
      - postgres
      - mongo
    networks: [devnet]

  db-importer:
    image: alpine:3.20
    container_name: db-importer
    depends_on:
      mysql:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      MYSQL_HOST: mysql
      MYSQL_USER: "${MYSQL_USER}"
      MYSQL_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      POSTGRES_HOST: postgres
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      MONGO_HOST: mongo
      MONGO_USER: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    volumes:
      - ./input/mysql:/input/mysql:ro
      - ./input/postgres:/input/postgres:ro
      - ./input/mongo:/input/mongo:ro
      - ./importer/import.sh:/import.sh:ro
    entrypoint: ["/bin/sh", "-lc", "apk add --no-cache bash inotify-tools mysql-client postgresql-client mongodb-tools curl && bash /import.sh"]
    networks: [devnet]

  nginx:
    image: nginx:1.27-alpine
    container_name: nginx
    ports:
      - "3000:3000"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped
    networks: [devnet]

networks:
  devnet:
    driver: bridge

volumes:
  pgadmin-data:
